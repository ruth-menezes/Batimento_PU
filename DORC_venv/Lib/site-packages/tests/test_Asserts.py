import pytest
from DORC_Utils import assert_column_interval, assert_data_type, assert_number_of_lines, assert_duplicated_values,\
    assert_daily_reports, assert_data_consistency
import pandas as pd
from datetime import datetime, timedelta
import json
from DORC_Utils import read_publicador
from prefect import Flow, task



def write_assert_result_dataframe(data_df):
    data_df.to_csv("assert_result_dataframe.csv", index=False)
    return

@task
def write_assert_result(result, return_type):
    return_type = return_type.lower()
    open("assert_result_dataframe.csv", "w").close()
    with open("assert_result.txt", "w") as file:
        if return_type == 'dataframe':
            write_assert_result_dataframe(result)
        elif return_type == 'bool':
            file.write(str(result))
        else:
            file.write(str(result[0]))
            write_assert_result_dataframe(result[1])
    return


# test assert_column_interval
def run_column_interval(columns, min_value, max_value, min_value_alert=None,
                        max_value_alert=None, return_ok=False, return_type='DataFrame'):
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with Flow("column in interval") as flow:
        result_df = assert_column_interval(data_df, columns, min_value, max_value,
                                           min_value_alert, max_value_alert, return_ok, return_type)
        write_assert_result(result_df, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def test_col_interval_raises_exception_on_wrong_list_type_columns():
    with pytest.raises(TypeError):
        run_column_interval(columns=[11, 2,  3], max_value=10, min_value=1)
    return


def test_col_interval_raises_exception_on_wrong_type_columns():
    with pytest.raises(TypeError):
        run_column_interval(columns=10, max_value=10, min_value=1)
    return


def test_col_interval_raises_exception_on_max_value_wrong_type():
    with pytest.raises(ValueError):
        run_column_interval(columns="QTDE Fech", max_value="ff", min_value=None)
    return


def test_col_interval_raises_exception_on_min_value_wrong_type():
    with pytest.raises(ValueError):
        run_column_interval(columns="QTDE Fech", max_value=10, min_value='aa')
    return


def test_col_interval_raises_exception_on_no_parameter_initialized():
    with pytest.raises(Exception):
        run_column_interval(columns="QTDE Fech", max_value=None, min_value=None)
    return


def test_col_interval_raises_exception_on_max_value_alert_wrong_type():
    with pytest.raises(ValueError):
        run_column_interval(columns="QTDE Fech", max_value=10, min_value=1, min_value_alert=2, max_value_alert='a')
    return


def test_col_interval_raises_exception_on_min_value_alert_wrong_type():
    with pytest.raises(ValueError):
        run_column_interval(columns="QTDE Fech", max_value=10, min_value=1, min_value_alert='fa', max_value_alert=8)
    return


def test_col_interval_bool_true():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0,
                                                 min_value=-1.0, return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    return


def test_col_interval_bool_false():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0,
                                                 min_value=100.0, return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    return


def test_col_interval_tuple_true_empty():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0,
                                                 min_value=-1.0, return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_col_interval_tuple_false():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0,
                                                 min_value=100.0, return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_col_interval_dataframe_empty():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0, min_value=-1.0)
    if result_bool is not None:
        raise TypeError("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_col_interval_dataframe():
    result_df, result_bool = run_column_interval(columns="QTDE Fech", max_value=2000000.0,  min_value=100.0)
    if result_bool is not None:
        raise TypeError("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_col_interval_ok_return():
    result_df, lx = run_column_interval(columns="QTDE Fech", max_value=2000000.0,
                                        min_value=-1.0, return_type='Tuple', return_ok=True)
    if not result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("Alert status found")
    if result_df.empty:
        raise Exception("no Ok status found")


def test_col_interval_with_no_waning_status():
    result, lx = run_column_interval(columns="QTDE Fech", max_value=1000.0, min_value=100.0)
    alert_result = result[result['Status'] == 'Warning']
    if not alert_result.empty:
        raise Exception("shouldn't have Warning Status")
    return


def test_col_interval_columns_names():
    result, lx = run_column_interval(columns="QTDE Fech", max_value=1000.0, min_value=100.0)
    if not list(result.columns) == ['Status', 'Comments']:
        raise Exception(f"Expected columns = ['Status', 'Comments'] and not {list(result.columns)}")
    return


def test_col_interval_alert_status():
    result, lx = run_column_interval(columns="QTDE Fech", max_value=1000.0, min_value=100.0)
    alert_result = result[result['Status'] == 'Alert']
    n_rows = len(alert_result)
    if n_rows != 14666:
        raise Exception(f"Expected 14666 rows with Alert Status and not {n_rows}")
    return


def test_col_interval_warning_status():
    result, lx = run_column_interval(columns="QTDE Fech", max_value=1000.0, min_value=100.0,\
                                 min_value_alert=300.0, max_value_alert=800.0)
    warning_result = result[result['Status'] == 'Warning']
    n_rows = len(warning_result)
    if n_rows != 2688:
        raise Exception(f"Expected 2688 rows with Warning Status and not {n_rows}")
    return



#test assert_number_of_lines
def run_number_of_lines(reference_df, variation_danger, variation_alert=None, return_ok=False, return_type='DataFrame'):
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with Flow("Number of Lines") as flow:
        result_df = assert_number_of_lines(reference_df, data_df, variation_danger,
                                           variation_alert, return_ok, return_type)
        write_assert_result(result_df, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def percent_data_df(data_df, value):
    return data_df.loc[:int(value*len(data_df)), :]


def test_daily_rep_raises_exception_on_wrong_return_type():
    with pytest.raises(ValueError):
        run_number_of_lines(pd.DataFrame(), 40, return_type='Int')
    return


def test_num_of_lines_raises_exception_on_wrong_reference_df_type():
    with pytest.raises(TypeError):
        run_number_of_lines([], 30)
    return


def test_num_of_lines_raises_exception_on_empty_reference_df():
    with pytest.raises(Exception):
        run_number_of_lines(pd.DataFrame(), 30)
    return


def test_num_of_lines_raises_exception_on_wrong_variation_danger_type():
    with pytest.raises(Exception):
        run_number_of_lines(pd.DataFrame(), '20')
    return


def test_num_of_lines_raises_exception_on_wrong_variation_alert_type():
    with pytest.raises(Exception):
        run_number_of_lines(pd.DataFrame(), 50.0, '2')
    return


def test_num_of_lines_raises_exception_on_variation_danger_lower_than_0():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with pytest.raises(Exception):
        run_number_of_lines(data_df, -10)
    return


def test_num_of_lines_raises_exception_on_variation_alert_lower_than_0():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with pytest.raises(Exception):
        run_number_of_lines(data_df, 50, -50)
    return


def test_num_of_lines_bool_true():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 40, return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    return


def test_num_of_lines_bool_false():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 10, return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    return


def test_num_of_lines_tuple_true_empty():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 40, return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_num_of_lines_tuple_false():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 10, return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_num_of_lines_dataframe_empty():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 40)
    if result_bool is not None:
        raise Exception("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_num_of_lines_dataframe():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 10)
    if result_bool is not None:
        raise Exception("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_num_of_lines_ok_return():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result_df, result_bool = run_number_of_lines(reference_df, 40, return_ok=True)
    if not result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("Alert status found")
    if result_df.empty:
        raise Exception("no Ok status found")


def test_num_of_lines_only_danger_status_warning_none():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 0.80)
    result, lx = run_number_of_lines(reference_df, 10)
    alert_result = result[result['Status'] == 'Warning']
    if not alert_result.empty:
        raise Exception("shouldn't have Alert Status")
    return


def test_num_of_lines_only_warning_status():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 80)
    result, lx = run_number_of_lines(reference_df, 10, 5)
    alert_result = result[result['Status'] == 'Warning']
    if not alert_result.empty:
        raise Exception("shouldn't have Alert Status")
    return


def test_num_of_lines_only_alert_status():
    reference_df = pd.read_excel("Test_Asserts_Table.xlsx")
    reference_df = percent_data_df(reference_df, 80)
    result, lx = run_number_of_lines(reference_df, 60, 5)
    danger_result = result[result['Status'] == 'Alert']
    if not danger_result.empty:
        raise Exception("shouldn't have Alert Danger")
    return


#test assert_duplicated_values
def run_duplicated_values(subset=None, return_ok=False, return_type='DataFrame'):
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with Flow("Number of Lines") as flow:
        result_df = assert_duplicated_values(data_df, subset, return_ok, return_type)
        write_assert_result(result_df, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def test_dup_values_raises_exception_on_wrong_subset_type():
    with pytest.raises(TypeError):
        run_duplicated_values(1)
    return


def test_dup_values_raises_exception_on_wrong_list_subset_type():
    with pytest.raises(TypeError):
        run_duplicated_values([1, 2])
    return


def test_dup_values_bool_true():
    result_df, result_bool = run_duplicated_values(return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    return


def test_dup_values_bool_false():
    result_df, result_bool = run_duplicated_values(['Valor Liq Fech','Operador', 'Mesa', 'Tx. 252'], return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    return


def test_dup_values_tuple_true_empty():
    result_df, result_bool = run_duplicated_values(return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_dup_values_tuple_false():
    result_df, result_bool = run_duplicated_values(['Valor Liq Fech','Operador', 'Mesa', 'Tx. 252'], return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_dup_values_dataframe_empty():
    result_df, result_bool = run_duplicated_values()
    if result_bool is not None:
        raise Exception("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_dup_values_dataframe():
    result_df, result_bool = run_duplicated_values(['Valor Liq Fech','Operador', 'Mesa', 'Tx. 252'])
    if result_bool is not None:
        raise Exception("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_dup_values_ok_return():
    result_df, lx = run_duplicated_values(return_ok=True)
    if not result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("Alert status found")
    if result_df.empty:
        raise Exception("no Ok status found")


def test_dup_values_subset_none():
    result,lx = run_duplicated_values()
    if not result.empty:
        raise Exception("shouldn't have any status")
    return


def test_dup_values_alert():
    result, lx = run_duplicated_values(['Valor Liq Fech','Operador', 'Mesa', 'Tx. 252'])
    alert_result = result[result['Status'] == "Warning"]
    if not alert_result.empty:
        raise Exception("shouldn't have Warning Status")
    if result.empty:
        raise Exception("Should have Alert Status")
    return


# test assert data type
def run_data_type(columns, column_type, to_date=False, return_ok=False, return_type='DataFrame'):
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Data Atual'] = data_df['Data Atual'].apply(lambda x: str(x))
    if to_date:
        data_df['Data Atual'] = pd.to_datetime(data_df['Data Atual'])
    with Flow("Data type") as flow:
        result = assert_data_type(data_df, columns, column_type, return_ok, return_type)
        write_assert_result(result, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def test_data_type_raises_exception_on_wrong_list_type_columns():
    with pytest.raises(TypeError):
        run_data_type(columns=[11, 2,  3], column_type='Number')
    return


def test_data_type_raises_exception_on_wrong_type_columns():
    with pytest.raises(TypeError):
        run_data_type(columns=10, column_type='Number')
    return


def test_data_type_raises_exception_on_wrong_list_type_column_type():
    with pytest.raises(TypeError):
        run_data_type(columns="QTDE Fech", column_type=[1, 2])
    return


def test_data_type_raises_exception_on_wrong_type_column_type():
    with pytest.raises(TypeError):
        run_data_type(columns="QTDE Fech", column_type=1)
    return


def test_data_type_raises_on_wrong_return_type():
    with pytest.raises(ValueError):
        run_data_type("QTDE Fech", 'Number', return_type='List')
    return


def test_data_type_object_as_date():
    result, lx = run_data_type('Data Atual', 'Date')
    if not result.empty:
        raise Exception("Transformation of the object data into a data type not implemented or not working")
    return


def test_data_type_return_bool_true():
    result_df, result_bool = run_data_type('QTDE Fech', 'Number', return_type='Bool')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if result_df is not None:
        raise Exception("DataFrame returned")
    return


def test_data_type_return_bool_false():
    result_df, result_bool = run_data_type('QTDE Fech', 'Text', return_type='Bool')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df is not None:
        raise Exception("DataFrame returned")
    return


def test_data_type_return_tuple_true_empty():
    result_df, result_bool = run_data_type('QTDE Fech', 'Number', return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_data_type_return_tuple_false():
    result_df, result_bool = run_data_type('QTDE Fech', 'Text', return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_data_type_return_dataframe_empty():
    result_df, result_bool = run_data_type('QTDE Fech', 'Number', return_type='DataFrame')
    if result_bool is not None:
        raise Exception("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_data_type_return_dataframe():
    result_df, result_bool = run_data_type('QTDE Fech', 'Text', return_type='DataFrame')
    if result_bool is not None:
        raise Exception("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_data_type_number():
    result, lx = run_data_type('QTDE Fech', 'Number')
    if not result.empty:
        raise Exception('Error in validating "Number"')
    return


def test_data_type_text():
    result, lx = run_data_type('Local Registro', 'Text')
    if not result.empty:
        raise Exception('Error in validating "Text"')
    return


def test_data_type_date():
    result, lx = run_data_type('Data Atual', 'Date', True)
    if not result.empty:
        raise Exception('Error in validating "Date"')


# test assert daily reports
def run_daily_reports(column=None, start_date=None, end_date=None, return_ok=False, return_type='DataFrame'):
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with Flow("Daily reports") as flow:
        result = assert_daily_reports(data_df, column, start_date, end_date, return_ok, return_type)
        write_assert_result(result, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def test_daily_rep_raises_exception_on_wrong_return_type():
    with pytest.raises(ValueError):
        run_daily_reports(return_type="Int")
    return


def test_daily_rep_raises_exception_on_wrong_column_type():
    with pytest.raises(TypeError):
        run_daily_reports(1)
    return


def test_daily_rep_raises_exception_on_wrong_start_date_type():
    with pytest.raises(TypeError):
        run_daily_reports(start_date=datetime(2020, 1, 10).timestamp())
    return


def test_daily_rep_raises_exception_on_wrong_end_date_type():
    with pytest.raises(TypeError):
        run_daily_reports(start_date=datetime(2020, 1, 10), end_date=datetime(2020, 1, 10).timestamp())
    return


def test_daily_rep_raises_exception_on_wrong_start_date_format():
    with pytest.raises(Exception):
        run_daily_reports(start_date="2020/01/10")
    return


def test_daily_rep_raises_exception_on_wrong_end_date_format():
    with pytest.raises(Exception):
        run_daily_reports(start_date="2020-01-10", end_date="2020/02/10")
    return


def test_daily_rep_raises_exception_on_end_date_smaller():
    with pytest.raises(Exception):
        run_daily_reports(start_date="2020-02-10", end_date="2020-01-10")
    return


def test_daily_rep_alert():
    result_df, lx = run_daily_reports()
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status returned")
    if len(result_df) > 1:
        raise Exception("only one row expected")
    return


def test_daily_rep_empty():
    result_df, lx = run_daily_reports(start_date="2020-01-17", end_date="2020-01-20")
    if not result_df.empty:
        raise Exception("result should be empty")
    return


def test_daily_rep_bool_true():
    result_df, result_bool = run_daily_reports(start_date="2020-01-17", end_date="2020-01-20", return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    return


def test_daily_rep_bool_false():
    result_df, result_bool = run_daily_reports(return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    return


def test_daily_rep_tuple_true_empty():
    result_df, result_bool = run_daily_reports(start_date="2020-01-17", end_date="2020-01-20", return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_daily_rep_tuple_false():
    result_df, result_bool = run_daily_reports(return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_daily_rep_dataframe_empty():
    result_df, result_bool = run_daily_reports(start_date="2020-01-17", end_date="2020-01-20", return_type='DataFrame')
    if result_bool is not None:
        raise TypeError("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_daily_rep_dataframe():
    result_df, result_bool = run_daily_reports(return_type='DataFrame')
    if result_bool is not None:
        raise TypeError("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_ok_return():
    result_df, lx = run_daily_reports(start_date="2020-01-17", end_date="2020-01-20", return_ok=True)
    if not result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("Alert status found")
    if result_df.empty:
        raise Exception("no Ok status found")


# test data consistency
def run_data_consistency(columns, operators, return_ok=False, return_type='DataFrame', data_df=None):
    if data_df is None:
        data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    with Flow("Data consistency") as flow:
        result = assert_data_consistency(data_df, columns, operators, return_ok, return_type)
        write_assert_result(result, return_type)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    try:
        result_df = pd.read_csv("assert_result_dataframe.csv", index_col=False)
    except:
        result_df = None
    with open("assert_result.txt", "r") as file:
        data = file.read()
        result_bool = None
        if data:
            result_bool = eval(data)
    return result_df, result_bool


def test_data_cons_raises_exception_wrong_columns_type():
    with pytest.raises(TypeError):
        run_data_consistency([1, 2], '<')
    return


def test_data_cons_raises_exception_on_wrong_list_columns_type():
    with pytest.raises(TypeError):
        run_data_consistency([(1, 2)], '<')
    return


def test_data_cons_raises_exception_on_no_tuple_columns():
    with pytest.raises(TypeError):
        run_data_consistency(["Column_A", "Column_B"], "<")
    return


def test_data_cons_raises_exception_on_no_tuple_value_list():
    with pytest.raises(TypeError):
        run_data_consistency([["Column_A", "Column_B"]], "<")
    return


def test_data_cons_raises_exception_on_non_valid_operetor():
    with pytest.raises(Exception):
        run_data_consistency(('Valor Original Fech', 'Valor IR'), "==")
    with pytest.raises(Exception):
        run_data_consistency(('Valor Original Fech', 'Valor IR'), "menor")
    with pytest.raises(Exception):
        run_data_consistency(('Valor Original Fech', 'Valor IR'), "smaller")
    return


def test_data_cons_raises_exception_on_wrong_return_type():
    with pytest.raises(ValueError):
        run_data_consistency(('Valor Original Fech', 'Valor IR'), "=", return_type="List")
    return


def test_data_cons_bool_true():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor IR'), "=", return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    return


def test_daily_rep_bool_false():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor Original Fech'), "=",
                                                                  return_type='Bool')
    if result_df:
        raise Exception("DataFrame returned")
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    return


def test_daily_rep_tuple_true_empty():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor IR'), "=", return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if not result_bool:
        raise Exception("return should be True")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_daily_rep_tuple_false():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor Original Fech'), "=",
                                                                  return_type='Tuple')
    if not isinstance(result_bool, bool):
        raise TypeError("return is not a bool type")
    if result_bool:
        raise Exception("return should be False")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_daily_rep_dataframe_empty():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor IR'), "=")
    if result_bool is not None:
        raise TypeError("Bool returned")
    if not result_df.empty:
        raise Exception("DataFrame should be empty")
    return


def test_daily_rep_dataframe():
    result_df, result_bool = result_df, lx = run_data_consistency(('Valor IR', 'Valor Original Fech'), "=")
    if result_bool is not None:
        raise TypeError("Bool returned")
    if result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("no Alert status found")
    return


def test_data_cons_ok_return():
    result_df, lx = run_data_consistency(('Valor IR', 'Valor IR'), "=", return_ok=True)
    if not result_df[result_df['Status'] == 'Alert'].empty:
        raise Exception("Alert status found")
    if result_df.empty:
        raise Exception("no Ok status found")


def test_data_cons_equal_op():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Valor IR_y'] = data_df['Valor IR'] + 0.0
    lx, result_bool = run_data_consistency(('Valor IR', 'Valor IR_y'), "=", return_type='Bool', data_df=data_df)
    if not result_bool:
        raise Exception("result should be True")
    return


def test_data_cons_smaller_op():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Valor IR_y'] = data_df['Valor IR'] + 1.0
    lx, result_bool = run_data_consistency(('Valor IR', 'Valor IR_y'), "<", return_type='Bool', data_df=data_df)
    if not result_bool:
        raise Exception("result should be True")
    return


def test_data_cons_smaller_equal_op():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Valor IR_y'] = data_df['Valor IR'] + 0.0
    data_df['Valor IR_z'] = data_df['Valor IR'] + 1.0
    lx, result_bool = run_data_consistency([('Valor IR', 'Valor IR_y'), ('Valor IR', 'Valor IR_z')],
                                           "<=", return_type='Bool', data_df=data_df)
    if not result_bool:
        raise Exception("result should be True")
    return


def test_test_data_cons_bigger_op():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Valor IR_y'] = data_df['Valor IR'] - 1.0
    lx, result_bool = run_data_consistency(('Valor IR', 'Valor IR_y'), ">", return_type='Bool', data_df=data_df)
    if not result_bool:
        raise Exception("result should be True")
    return


def test_data_cons_bigger_equal_op():
    data_df = pd.read_excel("Test_Asserts_Table.xlsx")
    data_df['Valor IR_y'] = data_df['Valor IR'] + 0.0
    data_df['Valor IR_z'] = data_df['Valor IR'] - 1.0
    lx, result_bool = run_data_consistency([('Valor IR', 'Valor IR_y'), ('Valor IR', 'Valor IR_z')],
                                           ">=", return_type='Bool', data_df=data_df)
    if not result_bool:
        raise Exception("result should be True")
    return


def test_data_cons_not_equal_op():
    lx, result_bool = run_data_consistency(('Valor Original Fech', 'Valor IR'), "!=", return_type='Bool')
    if result_bool:
        raise Exception("result should be False")
    return


if __name__ == "__main__":
    test_col_interval_alert_status()

