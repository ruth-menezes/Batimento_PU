import pytest
from DORC_Utils.Data_Quality import sqlserver_connector, write_dataquality
import pandas as pd
from datetime import datetime, timedelta
import json
from prefect import Flow


def run_flow(data_df, flow_name, env='DEV'):
    with Flow(flow_name) as flow:
        write_dataquality(data_df, flow_name, enviroment=env)
    flow_output = flow.run()
    if 'Failed' in str(flow_output):
        key = list(flow_output._result.value.keys())[0]
        raise flow_output._result.value[key].result
    return


def write_and_get_data(data_df):
    run_flow(data_df,  'data_quality_test')
    connection = sqlserver_connector(
        host='dwrj-sql-03',
        database='bd238datasci',
        trusted_connection=True
    )
    cursor = connection.cursor()
    cursor.execute("SELECT id FROM [data_quality].[validations] WHERE name = 'data_quality_test'")
    validation_id = cursor.fetchone()[0]
    cursor.execute(f"SELECT * FROM [data_quality].[results] WHERE validationid = {validation_id}")
    data = cursor.fetchall()
    cursor.execute(f"DELETE FROM [data_quality].[results] WHERE validationid = {validation_id}")
    cursor.commit()
    cursor.close()
    connection.close()
    return data


def test_raises_exception_on_result_not_dataframe():
    with pytest.raises(TypeError):
        run_flow([], 'data_quality_test')
    return


def test_raises_exeption_on_non_string_flow_name_argument():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'comments': [{}],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(TypeError):
        run_flow(data_df, 1)
    return


def test_raises_exception_on_non_string_environment_argument():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'comments': [{}],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(KeyError):
        run_flow(data_df, 'data_quality_test', 'DSV')
    return


def test_raises_exception_on_no_key_status():
    data_df = pd.DataFrame({
        'comments': [{}],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(KeyError):
        run_flow(data_df, 'data_quality_test')
    return


def test_raises_exception_on_non_valid_status():
    data_df = pd.DataFrame({
        'status': ['FINE'],
        'comments': [{}],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(Exception):
        run_flow(data_df, "data_quality_test")
    return


def test_raises_exception_on_no_key_comments():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(KeyError):
        run_flow(data_df, 'data_quality_test')
    return


def test_raises_exception_on_no_key_reference_date():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'comments': [{}]
    })
    with pytest.raises(KeyError):
        run_flow(data_df, 'data_quality_test')
    return


def test_raises_exception_on_non_dict_comments_argument():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'comments': [()],
        'reference_date': [datetime.now() - timedelta(days=30)]
    })
    with pytest.raises(TypeError):
        run_flow(data_df, 'data_quality_test')
    return


def test_raises_exception_on_non_datetime_reference_date_argument():
    data_df = pd.DataFrame({
        'status': ['Ok'],
        'comments': [{}],
        'reference_date': [str(datetime.now() - timedelta(days=30))]
    })
    with pytest.raises(TypeError):
        run_flow(data_df, 'data_quality_test')
    return


def test_insert_one_row_dataframe():
    reference_date = datetime.now()
    data_df = pd.DataFrame({
        'status': ['Danger'],
        'comments': [{"test_key": "test_value"}],
        'reference_date': [reference_date]
    })
    data = write_and_get_data(data_df)
    if not data:
        raise Exception("Data not found")
    return


def test_insert_multiple_row_dataframe():
    reference_date = datetime.now()
    data_df = pd.DataFrame({
        'status': ['Danger', 'Ok'],
        'comments': [{"test_key": "test_value"}, {}],
        'reference_date': [reference_date, reference_date]
    })
    data = write_and_get_data(data_df)
    if not data:
        raise Exception("Data not found")
    if len(data) < 2:
        raise Exception("Not all rows inserted")
    return


def test_insert_comments():
    reference_date = datetime.now()
    comments = {"test_key": "test_value"}
    data_df = pd.DataFrame({
        'status': ['Danger'],
        'comments': [comments],
        'reference_date': [reference_date]
    })
    data = write_and_get_data(data_df)
    if json.loads(data[0][1]) != comments:
        raise Exception("Error inserting data")
    return


def test_insert_reference_date():
    reference_date = datetime.now().replace(second=0, microsecond=0)
    comments = {"test_key": "test_value"}
    data_df = pd.DataFrame({
        'status': ['Danger'],
        'comments': [comments],
        'reference_date': [reference_date]
    })
    data = write_and_get_data(data_df)
    if data[0][-1] != reference_date:
        raise Exception("Error inserting data")
    return


def test_insert_status():
    reference_date = datetime.now().replace(second=0, microsecond=0)
    data_df = pd.DataFrame({
        'status': ['Ok', 'Alert', 'Danger'],
        'comments': [{}, {"test_key": "test_value"}, {"test_key": "test_value"}],
        'reference_date': [reference_date, reference_date, reference_date]
    })
    data = write_and_get_data(data_df)
    if [x[4] for x in data] != [2, 1, 0]:
        raise Exception("Error inserting data")
    return

if __name__ == "__main__":
    run_flow({}, 'data_quality_test')